#!ruby
# frozen_string_literal: true

PATH_ROOT = '/Users/tommy/Downloads'.freeze
PATH_FILES = '/Orito/OritoWalls/'.freeze

require 'zip'
require 'fileutils'

# oritio zip file handler
class OritoZip
  def initialize(filename)
    @filename = filename
    @origin_filename = "#{PATH_ROOT}/#{filename}"
  end

  def archive
    return unless destination_filename
    puts "|   Moving zip    : from #{origin_filename}"
    puts "|                 :   to #{destination_filename}"
    FileUtils.mv(origin_filename, destination_filename)
  end

  def destination_filename
    @destination_filename ||=
      "#{PATH_ROOT}/Orito/Orito#{zip_quality}zips/#{filename}"
  end

  def process
    Zip::File.open(filename) do |zipfile|
      puts '-' * 79
      zipfile.each do |entry|
        OritoZipEntry.process entry
      end
      puts '-' * 79
    end
  end

  def zip_quality
    @zip_quality ||= filename.match(/4k|QHD/).to_a.first
  end

  private

  attr_reader :filename, :origin_filename
end

# oritio zip entry handler
class OritoZipEntry
  def self.process(entry)
    new(entry).process
  end

  def initialize(entry)
    @entry = entry
  end

  def entry_quality
    entry.name.match(/4k|1600p|1440p/).to_a.first
  end

  def destination_filename
    @destination_filename ||=
      "#{PATH_ROOT}#{PATH_FILES}#{entry_quality}/#{entry.name}"
  end

  def process
    puts "| #{entry.name}"
    return if File.exist? destination_filename.to_s
    puts "|   Creating file : #{destination_filename}"
    puts
    entry.extract(destination_filename)
  end

  private

  attr_reader :entry
end

# Located all files in PATH_ROOT that glob match 4k or QHD and process them

Dir.chdir(PATH_ROOT)
four_k = Dir.glob('*4k*.zip')
qhd    = Dir.glob('*QHD*.zip')

(four_k + qhd).each do |filename|
  zip = OritoZip.new filename
  zip.process
  zip.archive
end
